/*


 * Virtio VSSD Support
 *
 * Copyright Indian Institute of Technology Bombay. 2017
 * Copyright Bhavesh Singh <bhavesh@cse.iitb.ac.in>
 *
 * This work is licensed under the terms of GNU GPL, version 3.
 * See the COPYING file in the top-level directory.
 */
/*Added by prafull...Begin ADD..*/
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#include <math.h>

#include  "../../../shm-02.h"
/*Added by prafull...End ADD..*/
#include "qemu/osdep.h"
#include "qemu/iov.h"
#include "qemu/timer.h"
#include "qemu-common.h"
#include "hw/virtio/virtio.h"
#include "hw/i386/pc.h"
#include "sysemu/balloon.h"
#include "hw/virtio/virtio-balloon.h"
#include "sysemu/kvm.h"
#include "exec/address-spaces.h"
#include "qapi/visitor.h"
#include "qapi-event.h"
#include "trace.h"

#include "hw/virtio/virtio-bus.h"
#include "hw/virtio/virtio-access.h"

#include "qemu-common.h"
#include "hw/virtio/virtio.h"
#include "hw/virtio/virtio-vssd.h"
#define SIZE 20971520
#define size1 1000000
#define VM_REGISTER 1
#define VM1 1
/*Added by Prafull./.BEGIN ADD..*/
//static uint64_t invalid1=0,invalid2=0;
/*Added by prafull..END ADD..*/
int block_list[20971520];
key_t shmkey;	
struct Memory *ShmPTR;	
static void virtio_vssd_free_request(VirtIOVssdReq *vssdReq)
{
    if (vssdReq) {
        g_free(vssdReq);
    }
}

static inline uint64_t virtio_vssd_map_offset(uint64_t sector) {
    // Some dummy fixed offset for now. Will need to have access to
    // shared state where the mappings for all VMs are maintained.
   // return (sector + SECTOR_OFFSET) << SECTOR_SHIFT;	
      	uint64_t actual_sector; 
      	actual_sector = block_list[sector];  
      	return (actual_sector + SECTOR_OFFSET) << SECTOR_SHIFT;
}

static uint32_t virtio_vssd_get_balloon_size(VirtIOVssd *vssd) {
    uint32_t i=0, total_sectors = 0;
    uint32_t *list = vssd->block_list;
    for(; i<vssd->capacity; i++) {
        if((list[i/32] & (1 << (i%32))) == (1 << (i%32))) {
            total_sectors++;
        }
    }
    return total_sectors;
}
static int virtio_get_ssd_size(void){
	int count=0,i;
        for(i=0;i<SIZE;i++){
		if(block_list[i] != -1)
			count++;
	}
	return count;
}
// The guest has freed blocks that we maintain a list of here too.
static void virtio_vssd_free_blocks(struct VirtIOVssd *vssd, struct VirtIOVssdResizeInfo *resize_info) {
   // printf("virtio_vssd_backend: Inside vssd free blocks function\n");	
    uint32_t i=0,j=0,total_sectors = abs(resize_info->status);
    int log_sector;
    uint32_t *list = vssd->block_list;
    int count,consumed=0;
    double round;
    //printf("Virtio_vssd_backend: Sectors freed by the guest = %d\n",total_sectors);
/*    for(;i<abs(total_sectors);i++) {
        sector_num = resize_info->sector_list[i];
	//printf("virtio_vssd_backend: count = %6d. logical block : %"PRIu64" \n",i,sector_num);
        list[sector_num/32] |= (1 << (sector_num % 32));//setting the bit
    }
*/   	
     //printf("%u\n", virtio_vssd_get_balloon_size(vssd));
/*     for(;i<abs(total_sectors);i++){
	log_sector = resize_info->sector_list[i];
        printf("sector received is--->%d\n",log_sector);	
     }
*/
     pthread_mutex_lock(&(ShmPTR->lock));
     printf("Lock acquired...\n");
     ShmPTR->id = 1;
     ShmPTR->flag = 0;
     ShmPTR->msg_type = 3;
     ShmPTR->size_dealloc = total_sectors;
     ShmPTR->vm_done = 1;\
     printf("No of sectors to be removed are %d\n",total_sectors);
     round = (double)ShmPTR->size_dealloc/size1;
 //  printf("value of round is %d\n",round);
     count = ceil(round);
     ShmPTR->status = READY;
     printf("No of rounds required are %d\n",count);
//communicate the list of sectors that guest has marked for deallocation...
     while(count--){
           while(ShmPTR->status!=READY);
                printf("Round =%d\n",count);         
           	if(count==0){
			for(j=0;j<abs(total_sectors);j++){	
			           log_sector = resize_info->sector_list[j];
                        printf("logical sector given by guest is --%d\n",log_sector);   
                        if(log_sector >= 20971520 || log_sector <0){
                        	log_sector = 0;
                        	printf("Hey you were right\n");
                        }
						ShmPTR->ptr[i++] = block_list[log_sector];
				   		block_list[log_sector] = -1; 	
               		}	
                        printf("Done with the last round...\n");
                        ShmPTR->status = NOT_READY;
		        goto X;	
		}	
		for(j=0;j<total_sectors;j++){
			   log_sector = resize_info->sector_list[j++];	
	     		   ShmPTR->ptr[i++] = block_list[log_sector];
                           block_list[log_sector] = -1;
                  }
          	consumed += total_sectors; 
                ShmPTR->status = NOT_READY;    
	}
   X: while(ShmPTR->status!=FILLED);
      printf("flag checked...!!\n");
      ShmPTR->status = TAKEN; 
      printf("status set to taken...\n");   
      resize_info->ack = resize_info->status;
	     	
}

// We tell the guest which blocks to map again...giving blocks to guest
static void virtio_vssd_map_blocks(struct VirtIOVssd *vssd, struct VirtIOVssdResizeInfo *resize_info) {
    //printf("virtio_vssd_backend: Inside map blocks function\n");
    uint32_t i=0, j=0,k=0, total_sectors = resize_info->status;
    uint32_t *list = vssd->block_list;
    int count,consumed=0;
    double round;
    pthread_mutex_lock(&(ShmPTR->lock));
    ShmPTR->id = 1;
    ShmPTR->msg_type = 2;
    ShmPTR->size_alloc = total_sectors;
    ShmPTR->vm_done = 1;
    round = (double)ShmPTR->size_alloc/size1;
    count = ceil(round);
    printf("Data written to shared memory\n"); 
    while(count--){
    	while(ShmPTR->status != FILLED);	
       
	if(count==0){
		for(i=0;i<ShmPTR->size_alloc;i++){
                       if(block_list[j]==-1)
                        printf("Invalid mapping found...\n");
	         	block_list[j++] = ShmPTR->ptr[i];
                        resize_info->sector_list[k++]= j-1;
		}	
		goto X;	
	}	
	for(i=0;i<ShmPTR->size_alloc;i++){
	      if(block_list[j]==-1){      	      		
              block_list[j++] = ShmPTR->ptr[i];
              resize_info->sector_list[k++]= j-1;   
             } 
	}
	consumed += size1;
   
      X:ShmPTR->status = TAKEN;
	printf("Round %d consumed\n",count+1);
     //   printf("Received sectors from %d to %d\n",start,end); 
/*   for(;i<vssd->capacity && j<total_sectors; i++) {	
        if((list[i/32] & (1 << (i%32))) == (1 << (i%32))) {//checking if the bit is 1 	
            list[i/32] &= ~(1 << (i%32));//clearing the bits
            resize_info->sector_list[j++] = i;
        }
    }
*/
//    printf("%u\n", virtio_vssd_get_balloon_size(vssd));
  }
}

static void virtio_vssd_handle_resize(VirtIODevice *vdev, VirtQueue *vq)
{
    VirtIOVssdResizeInfo resize_info;
    VirtIOVssd *vssd = (VirtIOVssd *)vdev;
    VirtQueueElement *elem;
    struct iovec *iov;
    uint32_t in_num;
    int sign;

    //static int x = 0;

    printf("virtio_vssd_backend: Control virtqueue kick received!\n");

//    vssd->ctrl_vq_elem = virtqueue_pop(vq, sizeof(VirtQueueElement));

//    iov = vssd->ctrl_vq_elem->in_sg;
//    in_num = vssd->ctrl_vq_elem->in_num;
//    iov_to_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));

//    printf("virtio_vssd_backend: Status: %d, Ack %d", resize_info.status, resize_info.ack);
    while((elem = virtqueue_pop(vq, sizeof(VirtQueueElement))) != NULL) {
        iov = elem->in_sg;
        in_num = elem->in_num;
        iov_to_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
        sign = resize_info.status < 0 ? -1 : 1;
        if(resize_info.status < 0) {
            // We set the ack to the number of sectors we were able to recover from the list, while still maintaining the sign for direction.
//            if(resize_info.status != -1) {
//                resize_info.ack = resize_info.status + 1; // All but one sectors unmapped successfully!
//                resize_info.sector_list[0] = 1298; // Sector 1298 was not unmapped successfully. We put it back in the sector list.
//            } else
//                resize_info.ack = resize_info.status;
	        printf("Trying to free blocks\n");	
            virtio_vssd_free_blocks(vssd, &resize_info);
            vssd->command -= sign*(resize_info.status - resize_info.ack);            
        } 
        else if(resize_info.status > 0) {

            if(resize_info.ack != -1) // This means that this is an ack from the guest
                vssd->command -= sign*(resize_info.status - resize_info.ack);
            else if(resize_info.ack == -1) // This means this is a new command
                resize_info.ack = 0; // We don't want the guest logic to go awry
            if(abs(resize_info.status-resize_info.ack) != 0) {
                // We need to set the sectors for the given number.
                virtio_vssd_map_blocks(vssd, &resize_info);
            } else {
                // We end the processing of this resize request here.
                resize_info.status = 0;
                resize_info.ack = 0;
            }
        }
	    iov_from_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
        virtqueue_push(vq, elem, sizeof(resize_info));
        virtio_notify(vdev, vq);
    }
//    virtqueue_push(vssd->ctrl_vq, vssd->ctrl_vq_elem, sizeof(resize_info));
//    virtio_notify(vdev, vq);
    if(vssd->command != 0) {
	//	printf("Yeah buddy..we have to inform the frontend\n");
        virtio_notify_config(vdev);
    } 
    else if(vssd->command == 0 && resize_info.status == resize_info.ack) {
        /* Added by Bhavesh Singh. 2017.06.16. Begin add */
        // The command has completed successfully
        //printf("virtio_vssd_backend: Ballooning finished: %lu %ld\n", (clock() - vssd->clock), CLOCKS_PER_SEC);
        struct timeval curr;
        gettimeofday(&curr, 0);
        uint64_t duration = (curr.tv_sec - vssd->time.tv_sec) * 1e6 + curr.tv_usec - vssd->time.tv_usec;

    //    uint32_t total_sectors = virtio_vssd_get_balloon_size(vssd);
          int get_sectors = virtio_get_ssd_size();

        printf("virtio_vssd_backend: Ballooning finished: %lu: %u\n", duration, get_sectors);
        /* Added by Bhavesh Singh. 2017.06.16. End add */
    }
}

// We do not need these functions!! The IO is automatically block aligned perhaps also because of the fact
// that our constant block offset is 4096 bytes, which ensure block boundary alignment.
/*
static int32_t virtio_vssd_read(int fd, QEMUIOVector *qiov)
{
    uint32_t i, size;
    char *buffer;
    int32_t error = 0;

    for(i=0; i<qiov->niov-1; i++) {
        size = qiov->iov[i].iov_len > SECTOR_SIZE ? (qiov->iov[i].iov_len / SECTOR_SIZE) * SECTOR_SIZE : SECTOR_SIZE;
        buffer = (char *)aligned_alloc(SECTOR_SIZE, size);
//        if((error = errno) < 0)
//            return error;
        if(buffer == NULL) {
            error = errno;
            goto out_error;
        }
        if(read(fd, buffer, qiov->iov[i].iov_len) < 0) {
            error = errno;
            goto out_error;
        }
        strncpy(qiov->iov[i].iov_base, buffer, qiov->iov[i].iov_len);
    }
out_error:
    return error;
}

static int32_t virtio_vssd_write(int fd, QEMUIOVector *qiov)
{
    uint32_t i, size;
    char *buffer;
    int32_t error = 0;

    for(i=0; i<qiov->niov; i++) {
        size = qiov->iov[i].iov_len > SECTOR_SIZE ? (qiov->iov[i].iov_len / SECTOR_SIZE) * SECTOR_SIZE : SECTOR_SIZE;
        buffer = (char *)aligned_alloc(SECTOR_SIZE, size);
//        memset(buffer, 0, size);
//        if((error = errno) < 0)
//            return error;
        if(buffer == NULL) {
            error = errno;
            goto out_error;
        }
        strncpy(buffer, qiov->iov[i].iov_base, qiov->iov[i].iov_len);
        if(write(fd, buffer, qiov->iov[i].iov_len) < 0) {
            error = errno;
            goto out_error;
        }
    }
out_error:
    return error;
}
*/

static void virtio_vssd_handle_request(VirtIODevice *vdev, VirtQueue *vq)
{
    VirtIOVssd *vssd = (VirtIOVssd *)vdev;
    VirtIOVssdReq *vssdReq;
    struct iovec *iov, *in_iov;
    uint32_t in_num, out_num, type;
    bool is_write;
    uint64_t offset;
    clock_t start, end;
    double cpu_time_used; 
  //  printf("virtio_vssd_backend: virtqueue kick received!\n");
    while((vssdReq = virtqueue_pop(vq, sizeof(VirtIOVssdReq))) != NULL) {
        //printf("virtio_vssd_backend: virtqueue element popped!\n");
        vssdReq->vssd = vssd;
        vssdReq->vq = vq;
        vssdReq->error = 0;
        iov = vssdReq->elem.out_sg;
        in_iov = vssdReq->elem.in_sg;
        in_num = vssdReq->elem.in_num;
        out_num = vssdReq->elem.out_num;
     //   printf("virtio_vssd_backend: Out: %u\tIn:%u\n", out_num, in_num);
        iov_to_buf(iov, out_num, 0, &vssdReq->hdr, sizeof(vssdReq->hdr));
       // printf("virtio_vssd_backend: hdr.type: %u\thdr.sector_num: %lu\n", vssdReq->hdr.type, vssdReq->hdr.sector_num);
        iov_discard_front(&iov, &out_num, sizeof(vssdReq->hdr));
        type = virtio_ldl_p(VIRTIO_DEVICE(vssdReq->vssd), &vssdReq->hdr.type);
//	printf("Type is====>");
//	printf("%" PRIu32 "\n",type);
      //  printf("virtio_vssd_backend: Type: %u\t", type);
        is_write = type & VIRTIO_VSSD_WRITE;
       // printf("IS_WRITE=%d\n",is_write);
        offset = virtio_vssd_map_offset(virtio_ldq_p(VIRTIO_DEVICE(vssdReq->vssd), &vssdReq->hdr.sector_num));
        if(lseek(vssd->fd, offset, SEEK_SET) < 0) // Go to the byte offset
            vssdReq->error = errno;
        //vssdReq->error = errno < 0 ? errno : 0;
        if(vssdReq->error < 0){
	    printf("Error occured\n");	
            goto push_output;
	}

        if(is_write) {
	    printf("Received Write request.................................\n");
                 start = clock();	
            qemu_iovec_init_external(&vssdReq->qiov, iov, out_num);
            //printf("virtio_vssd_backend: Number of io vectors: %d\n", vssdReq->qiov.niov);
//            lseek(vssd->fd, offset, SEEK_SET); // Go to the byte offset
//            vssdReq->error = errno < 0 ? errno : 0;
//            if(vssdReq->error < 0)
//                goto push_output;
            if(writev(vssd->fd, vssdReq->qiov.iov, vssdReq->qiov.niov) < 0){
                vssdReq->error = errno;
		printf("Error during writing\n");	
	    }	
            //vssdReq->error = virtio_vssd_write(vssd->fd, &vssdReq->qiov);
            //vssdReq->error = error < 0 ? error : 0;
            //for(i = 0; i < vssdReq->qiov.niov; i++) {
            //    snprintf(abc, 4096, "%s", (char*)vssdReq->qiov.iov[i].iov_base);
            //    abc[4095] = '\0';
            //    printf("virtio_vssd_backend: Virtio write operation: %s\n", abc);
            //}	    	
            end = clock();
	    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
	    printf("Write Completed......\n");	
            printf("write  took %f seconds to execute--------------->>>> \n", cpu_time_used);

        } else {
	  //  printf("Received Read request\n");	
            qemu_iovec_init_external(&vssdReq->qiov, in_iov, in_num); // The last one is the status word which we do not want to map.
            //printf("virtio_vssd_backend: Number of io vectors: %d\n", vssdReq->qiov.niov);
//            lseek(vssd->fd, offset, SEEK_SET); // Go to the byte offset
//            vssdReq->error = errno < 0 ? errno : 0;
//            if(vssdReq->error < 0)
//                goto push_output;
            if(readv(vssd->fd, vssdReq->qiov.iov, vssdReq->qiov.niov - 1) < 0){
                vssdReq->error = errno;
		//printf("Error during reading..\n");
	    }	
            //int32_t error = virtio_vssd_read(vssd->fd, &vssdReq->qiov);
            //vssdReq->error = error < 0 ? error : 0;
            // The following two lines are just for testing whether errors are propagated upwards.
            //vssdReq->error = -ENOMEM;
            //goto set_error;
            //for(i = 0; i < vssdReq->qiov.niov; i++) {
            //    snprintf((char*)vssdReq->qiov.iov[i].iov_base, vssdReq->qiov.iov[i].iov_len, "Singh");
            //    //(char*)vssdReq->qiov.iov[i].iov_base[4095] = '\0';
            //    printf("virtio_vssd_backend: Virtio read operation: %s\n", (char*)vssdReq->qiov.iov[i].iov_base);
            //}
	 //   printf("Read completed....\n");	
        }
        //printf("virtio_vssd_backend: Length of second in iov: %lu\n", in_iov[in_num - 1].iov_len);
    //    printf("virtio_vssd_backend: Direction: %d\tOut: %u\tIn:%u\tSector: %lu\tSize: %lu\n", is_write, out_num, in_num, sector_num, vssdReq->qiov.size);
        //virtqueue_detach_element(vq, &vssdReq->elem, vssdReq->qiov.size);
push_output:
        *((int*)vssdReq->qiov.iov[vssdReq->qiov.niov - 1].iov_base) = vssdReq->error > 0 ? -vssdReq->error : 0;
        virtqueue_push(vq, &vssdReq->elem, vssdReq->qiov.size);
        virtio_notify(vdev, vq);
        virtio_vssd_free_request(vssdReq);
        //virtio_blk_handle_vq(s, vq);
        //virtqueue_push(vq, &vssdReq->elem, 32);
        //virtio_queue_notify(vdev, 0);
    }
}

static void virtio_vssd_get_config(VirtIODevice *vdev, uint8_t *config_data)
{
    VirtIOVssd *vssd = VIRTIO_VSSD(vdev);
    struct virtio_vssd_config config;
    int sign = vssd->command < 0 ? -1 : 1;
    config.command = sign*vssd->command > SSD_BALLOON_UNIT ? sign*SSD_BALLOON_UNIT : vssd->command;

    vssd->command -= config.command;

    //vssd->command -= sign*SSD_BALLOON_UNIT;
    //if(sign*vssd->command < 0)
    //    vssd->command = 0;

    config.capacity = vssd->capacity;
    memcpy(config_data, &config, sizeof(struct virtio_vssd_config));
}

static void virtio_ssd_balloon_to_target(void *opaque, int64_t target)
{
    VirtIOVssd *vssd = VIRTIO_VSSD(opaque);
    VirtIODevice *vdev = VIRTIO_DEVICE(vssd);
    printf("%" PRId64 "\n",target);

    vssd->command += target; // We add to ensure that the direction is preserved.

    /* Added by Bhavesh Singh. 2017.06.16. Begin add */
    //vssd->clock = clock();
    gettimeofday(&vssd->time, 0);
    /* Added by Bhavesh Singh. 2017.06.16. End add */

    virtio_notify_config(vdev);
    printf("guest notified\n");
//    VirtIOVssdResizeInfo resize_info;
//    VirtIOVssd *vssd = VIRTIO_VSSD(opaque);
//    VirtIODevice *vdev = VIRTIO_DEVICE(vssd);
//    struct iovec *iov;
//    uint32_t in_num;

//    printf("virtio_vssd_backend: Resize called.\n");

//    if(vssd->ctrl_vq_elem == NULL)
//        return;
//    iov = vssd->ctrl_vq_elem->in_sg;
//    in_num = vssd->ctrl_vq_elem->in_num;
//    iov_to_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
//    resize_info.status = target;
//    iov_from_buf(iov, in_num, 0, &resize_info, sizeof(resize_info));
//    virtqueue_push(vssd->ctrl_vq, vssd->ctrl_vq_elem, sizeof(resize_info));
//    virtio_notify(vdev, vssd->ctrl_vq);
}

static uint64_t virtio_vssd_get_features(VirtIODevice *vdev, uint64_t features, Error **errp)
{
    return features;
}


static void vm_register(void){
	double round;
	int count,position=0,i,consumed=0,start,end;
	pthread_mutex_lock(&(ShmPTR->lock));	
	printf("Lock aquired..\n");
	ShmPTR->msg_type  = VM_REGISTER;//msg type 1 corresponds to registration
	ShmPTR->id = VM1;
        ShmPTR->size = 20971520; //ask for 5GB ...i.e 10485760 number of 512 byte sectors
        ShmPTR->vm_done=1;
        round = (double) ShmPTR->size/size1;
        count = ceil(round);
        printf("Data written to shared memory\n"); 
        while(count--){
     	   start = position;
    		while(ShmPTR->status != FILLED);	
			if(count==0){
				for(i=0;i<(ShmPTR->size)-consumed;i++){
	        		 	block_list[position++] = ShmPTR->ptr[i];
			}	
			goto X;	
		}	
		for(i=0;i<size1;i++){
        		block_list[position++] = ShmPTR->ptr[i];    
		}
		consumed += size1;
        X:ShmPTR->status = TAKEN;
	printf("Round %d consumed\n",count+1);
	end = position;
        printf("Received sectors from %d to %d\n",start,end); 
      }
     printf("Registeration Complete....\n");

}
static void virtio_vssd_device_realize(DeviceState *dev, Error **errp)
{
    printf("Inside realize function...\n");   
    int shmid;
    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
    VirtIOVssd *vssd = VIRTIO_VSSD(dev);

    strncpy(vssd->backingdevice, "/dev/sdb1",10);
  
    memset(block_list,-1,20971520*sizeof(block_list[0]));

   
    // FIXME: See if O_DIRECT works!
    vssd->fd = open(vssd->backingdevice, O_RDWR | O_DIRECT/* | O_SYNC*/);
    if(vssd->fd < 0) {
        error_setg(errp, "Unable to initialize backing SSD state");
        return;
    }
    vssd->ctrl_vq_elem = NULL;
    printf("Device initialised\n");    
    vssd->capacity = 20971520; 	
    vssd->block_list = calloc(vssd->capacity/32, sizeof(uint32_t)); // We divide by 32 as our array is of unsigned 32 bit integers.
    virtio_init(vdev, "virtio-vssd", VIRTIO_ID_VSSD, sizeof(struct virtio_vssd_config));
    // TODO: What is a good virtqueue size for a block device? We set it to 128.
    vssd->vq = virtio_add_queue(vdev, 128, virtio_vssd_handle_request);
    vssd->ctrl_vq = virtio_add_queue(vdev, 128, virtio_vssd_handle_resize);
    qemu_add_ssd_balloon_handler(virtio_ssd_balloon_to_target, vssd);
    shmkey = ftok("/tmp",'x');
    shmid = shmget(shmkey,sizeof(struct Memory),0666); 
     if (shmid < 0) {
	  perror("Msg:");	
          printf("*** shmget error (client) ***\n");
          exit(1);
     }
    // printf("   Client has received a shared memory of four integers...\n");

     ShmPTR = (struct Memory *) shmat(shmid, NULL, 0);
     if ((int) ShmPTR == -1) {
          printf("*** shmat error (client) ***\n");
          exit(1);
     }
    printf("Client has attached the shared memory...\n");

// Register 
    vm_register();
    
}

static void virtio_vssd_device_unrealize(DeviceState *dev, Error **errp)
{
    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
    VirtIOVssd *vssd = VIRTIO_VSSD(dev);
    qemu_remove_ssd_balloon_handler(vssd);
    virtio_del_queue(vdev, 0);
    virtio_cleanup(vdev);
}

static Property virtio_vssd_properties[] = {
    DEFINE_PROP_END_OF_LIST(),
};

static void virtio_vssd_class_init(ObjectClass *klass, void *data)
{
    DeviceClass *dc = DEVICE_CLASS(klass);
    VirtioDeviceClass *vdc = VIRTIO_DEVICE_CLASS(klass);

    dc->props = virtio_vssd_properties;
    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
    vdc->realize = virtio_vssd_device_realize;
    vdc->unrealize = virtio_vssd_device_unrealize;
    vdc->get_config = virtio_vssd_get_config;
    vdc->get_features = virtio_vssd_get_features;
}

static const TypeInfo virtio_vssd_info = {
    .name = TYPE_VIRTIO_VSSD,
    .parent = TYPE_VIRTIO_DEVICE,
    .instance_size = sizeof(VirtIOVssd),
    .class_init = virtio_vssd_class_init,
};

static void virtio_register_types(void)
{
    type_register_static(&virtio_vssd_info);
}

type_init(virtio_register_types)
