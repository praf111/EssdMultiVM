#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>
#include  <sys/types.h>
#include  <sys/ipc.h>
#include  <sys/shm.h>
#include  <signal.h>
#include  <pthread.h>
#include  <math.h>
#include  "../../shm-02.h"
#define VM_NO 10
#define SIZE 209715200
#define size1 100000000
key_t ShmKEY;
int ShmID;int temp[SIZE];
struct Memory *ShmPTR;
struct vminfo *vm_info[VM_NO];
int vm_count = 0;
int sector_list[SIZE];//index indicates sector no and value indicates vm id
/*struct vminfo{
	int id;
        int size;
};
*/    
void inthandler(int sig){
     signal(sig, SIG_IGN);
     shmdt((void *) ShmPTR);
     printf("Server has detached its shared memory...\n");
     shmctl(ShmID, IPC_RMID, NULL);
     printf("Server has removed its shared memory...\n");
     printf("Server exits...\n");
     exit(0);
}
/*
void get_vminfo(){
        int i = 0;
	for(i=0;i<=vm_count;i++){
		printf("vm-id=%d,vm-size=%d\n",vm_info[i]->id,vm_info[i]->size);
	}

}
*/
void alloc_blocks(int size,int id){
        int allocated=0;     
	printf("Received size is %d \n",size);
        int i,j;
       	for(i=0,j=0;i<SIZE && allocated <= size-1 ;i++){
		if(sector_list[i]==0){//sector is free
		 	sector_list[i]= id;//allocate to a vm
			ShmPTR->ptr[j] = i;
                        j++;  
			allocated++;
		}
	}
	printf("last sector allocated was i= %d",i); 
/*      for(i=0;i<=size;i++){
		printf("temp[%d] is %d\t",i,temp[i]);
	}
*/      
//      printf("Shared array is as follows..\n");	

/*      for(i=0;i<=size;i++){
		printf("ptr[%d] is %d\t",i,ShmPTR->ptr[i]);

	}
*/	printf("allocated =  %d\n",allocated);
	
}
void  main(int  argc, char *argv[])
{
     double round;
     int allocated=0,count;	
     signal(SIGINT,inthandler);//signal handler for ctrt+c
     memset(sector_list,0,209715200*sizeof(sector_list[0]));
     ShmKEY = ftok("/tmp", 'x');     
     ShmID = shmget(ShmKEY, sizeof(struct Memory), IPC_CREAT | 0666);
     printf("key is %x",ShmID);   
     if (ShmID < 0) {
          printf("*** shmget error (server) ***\n");
          exit(1);
     }
//     printf("Server has received a shared memory of four integers...\n");

     ShmPTR = (struct Memory *) shmat(ShmID, NULL, 0);
     
     if ((int) ShmPTR == -1) {
          printf("*** shmat error (server) ***\n");
          exit(1);
     }
     printf("Server has attached the shared memory...\n");
     printf("Virtual Address of the shared memory is : %p\n", (void *)ShmPTR);
     pthread_mutexattr_setpshared(&(ShmPTR->mutexAttr), PTHREAD_PROCESS_SHARED);
     if (pthread_mutex_init(&(ShmPTR->lock),&(ShmPTR->mutexAttr)) != 0) {
        printf("\n mutex init failed\n");
      }
     ShmPTR->vm_done = 0;    
     ShmPTR->status = TAKEN; 
     while(1){
        allocated = 0;
        while(!ShmPTR->vm_done);
       // vm_info[vm_count] = (struct vminfo* )malloc(sizeof(struct vminfo));
        printf("vm has send a message\n");
      //  vm_info[vm_count] -> id = ShmPTR->id;
      //  vm_info[vm_count] -> size = ShmPTR->size;  
        printf("requested size is .. %d\n",ShmPTR->size);

        if(ShmPTR->msg_type == 1){//allocate memory and return physical sectors
                round = (double)ShmPTR->size/size1;
                count = ceil(round); 
                printf("Number of rounds required are %f and count is %d \n",round,count);
         	while(count--){	
			while(!ShmPTR->status==TAKEN);
			ShmPTR->status = NOT_READY;
			if(count==0){//last round		
				alloc_blocks((ShmPTR->size)-allocated,ShmPTR->id);
				goto X;
			}
			alloc_blocks(size1,ShmPTR->id);
			ShmPTR->status = FILLED;
			allocated += size1;
			printf("Round %d completed...\n",count+1);					
		}
              
	}
	X:ShmPTR->status = FILLED;
	while(ShmPTR->status!=TAKEN);
     	ShmPTR->vm_done = 0;
        ShmPTR->status = TAKEN;   
        vm_count++;
        pthread_mutex_unlock(&(ShmPTR->lock));
        printf("Lock released by manager.\n");		 
//process message
     }	
  	      
  }
